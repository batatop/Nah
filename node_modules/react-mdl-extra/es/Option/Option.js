'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _keycodes = require('../keycodes');

var _keycodes2 = _interopRequireDefault(_keycodes);

require('./Option.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Option = function (_Component) {
  _inherits(Option, _Component);

  function Option(props) {
    _classCallCheck(this, Option);

    var _this = _possibleConstructorReturn(this, (Option.__proto__ || Object.getPrototypeOf(Option)).call(this, props));

    _this.onClick = _this.onClick.bind(_this);
    _this.onKeyDown = _this.onKeyDown.bind(_this);
    return _this;
  }

  _createClass(Option, [{
    key: 'onClick',
    value: function onClick() {
      var _props = this.props,
          closeMenu = _props.closeMenu,
          onClick = _props.onClick,
          value = _props.value;

      if (onClick) onClick(value);
      closeMenu();
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      if (e.keyCode === _keycodes2.default.UP || e.keyCode === _keycodes2.default.DOWN) {
        var node = (0, _reactDom.findDOMNode)(this);
        var children = node.parentNode.children;
        var i = [].indexOf.call(children, node);
        var len = children.length;
        var next = e.keyCode === _keycodes2.default.DOWN ? (i + 1) % len : (i + len - 1) % len;
        e.stopPropagation();
        e.preventDefault();
        children[next].focus();
      } else if (e.keyCode === _keycodes2.default.ENTER || e.keyCode === _keycodes2.default.SPACE) {
        e.stopPropagation();
        e.preventDefault();
        this.onClick();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {}
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          className = _props2.className,
          disabled = _props2.disabled,
          selected = _props2.selected,
          tabIndex = _props2.tabIndex;

      var itemClass = (0, _classnames2.default)('mdl-option', className, {
        'mdl-option--selected': selected,
        'mdl-option--disabled': disabled
      });
      return _react2.default.createElement(
        'li',
        {
          className: itemClass,
          tabIndex: tabIndex,
          onClick: this.onClick,
          onKeyDown: this.onKeyDown
        },
        children
      );
    }
  }]);

  return Option;
}(_react.Component);

Option.propTypes = {
  children: _react.PropTypes.any.isRequired,
  className: _react.PropTypes.string,
  closeMenu: _react.PropTypes.func,
  disabled: _react.PropTypes.bool,
  onClick: _react.PropTypes.func,
  selected: _react.PropTypes.bool,
  tabIndex: _react.PropTypes.number,
  value: _react.PropTypes.any
};
exports.default = Option;