'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMdl = require('react-mdl');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Dropdown = require('../Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _OptionList = require('../OptionList');

var _OptionList2 = _interopRequireDefault(_OptionList);

var _Option = require('../Option');

var _Option2 = _interopRequireDefault(_Option);

require('./MultiSelectField.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MultiSelectField = function (_Component) {
  _inherits(MultiSelectField, _Component);

  function MultiSelectField(props) {
    _classCallCheck(this, MultiSelectField);

    var _this = _possibleConstructorReturn(this, (MultiSelectField.__proto__ || Object.getPrototypeOf(MultiSelectField)).call(this, props));

    _this.state = { focused: false };
    _this.onItemClick = _this.onItemClick.bind(_this);
    _this.onTextfieldFocus = _this.onTextfieldFocus.bind(_this);
    _this.onTextfieldBlur = _this.onTextfieldBlur.bind(_this);
    _this.onChipClose = _this.onChipClose.bind(_this);
    if (props.showChipsBelow) {
      // eslint-disable-next-line no-console
      console.warn('Prop showChipsBelow is deprecated! Use chipsBelow instead.');
    }
    return _this;
  }

  _createClass(MultiSelectField, [{
    key: 'onItemClick',
    value: function onItemClick(val) {
      var _props = this.props,
          value = _props.value,
          onChange = _props.onChange;

      if (value.indexOf(val) === -1) {
        if (onChange) onChange([].concat(_toConsumableArray(value), [val]));
      }
    }
  }, {
    key: 'onTextfieldFocus',
    value: function onTextfieldFocus() {
      var _props2 = this.props,
          value = _props2.value,
          onFocus = _props2.onFocus;

      this.setState({ focused: true });
      if (onFocus) onFocus(value);
    }
  }, {
    key: 'onTextfieldBlur',
    value: function onTextfieldBlur() {
      var _props3 = this.props,
          value = _props3.value,
          onBlur = _props3.onBlur;

      this.setState({ focused: false });
      if (onBlur) onBlur(value);
    }
  }, {
    key: 'onChipClose',
    value: function onChipClose(val) {
      var _props4 = this.props,
          value = _props4.value,
          onChange = _props4.onChange;

      var index = value.indexOf(val);
      if (index > -1) {
        if (onChange) onChange([].concat(_toConsumableArray(value.slice(0, index)), _toConsumableArray(value.slice(index + 1))));
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props5 = this.props,
          align = _props5.align,
          className = _props5.className,
          chipsAfter = _props5.chipsAfter,
          chipsOutside = _props5.chipsOutside,
          showChipsBelow = _props5.showChipsBelow,
          error = _props5.error,
          label = _props5.label,
          offset = _props5.offset,
          readOnly = _props5.readOnly,
          value = _props5.value;
      var focused = this.state.focused;


      var allChildren = _react.Children.toArray(this.props.children);

      var children = allChildren.filter(function (c) {
        return value && value.indexOf(c.props.value) === -1;
      });

      var options = children.length ? children : _react2.default.createElement(
        _Option2.default,
        { disabled: true },
        'Empty'
      );

      var chips = value.map(function (v) {
        return allChildren.find(function (c) {
          return c.props.value === v;
        });
      }).map(function (_ref) {
        var props = _ref.props;
        return _react2.default.createElement(
          _reactMdl.Chip,
          { key: props.value, onClose: function onClose() {
              return _this2.onChipClose(props.value);
            } },
          props.children
        );
      });

      var inputProps = {
        type: 'text',
        value: '',
        readOnly: true,
        ref: function ref(_ref2) {
          return _this2.input = _ref2;
        }
      };
      if (!readOnly) {
        inputProps.onMouseDown = this.onTextfieldMouseDown;
        inputProps.onFocus = this.onTextfieldFocus;
        inputProps.onBlur = this.onTextfieldBlur;
      }

      var input = _react2.default.createElement(
        'div',
        { className: 'mdl-multiselect__textfield' },
        _react2.default.createElement('input', _extends({ className: 'mdl-multiselect__input' }, inputProps)),
        _react2.default.createElement(
          'label',
          { className: 'mdl-multiselect__label' },
          label
        ),
        _react2.default.createElement('i', { className: 'mdl-multiselect__arrow' })
      );

      var dropdownProps = {
        align: align,
        offset: offset,
        target: input,
        targetNode: this.container,
        useTargetWidth: true,
        useTargetMinHeight: !chipsOutside
      };

      var mainClass = (0, _classnames2.default)('mdl-multiselect', {
        'mdl-multiselect--error': error,
        'mdl-multiselect--focused': focused,
        'mdl-multiselect--chips-after': chipsAfter,
        'mdl-multiselect--chips-outside': chipsOutside
      }, className);

      return _react2.default.createElement(
        'div',
        { className: mainClass },
        chipsOutside && !chipsAfter && _react2.default.createElement(
          'div',
          { className: 'mdl-multiselect__chips' },
          chips
        ),
        _react2.default.createElement(
          'div',
          { className: 'mdl-multiselect__container', ref: function ref(_ref3) {
              return _this2.container = _ref3;
            } },
          !chipsOutside && !chipsAfter && chips,
          _react2.default.createElement(
            _Dropdown2.default,
            dropdownProps,
            _react2.default.createElement(
              _OptionList2.default,
              { value: value, onItemClick: this.onItemClick },
              options
            )
          ),
          !chipsOutside && chipsAfter && chips
        ),
        error && _react2.default.createElement(
          'span',
          { className: 'mdl-textfield__error' },
          error
        ),
        chipsOutside && chipsAfter && _react2.default.createElement(
          'div',
          { className: 'mdl-multiselect__chips' },
          chips
        )
      );
    }
  }]);

  return MultiSelectField;
}(_react.Component);

MultiSelectField.propTypes = {
  align: _react.PropTypes.string,
  children: _react.PropTypes.arrayOf(_react.PropTypes.element).isRequired,
  className: _react.PropTypes.string,
  chipsAfter: _react.PropTypes.bool,
  chipsOutside: _react.PropTypes.bool,
  error: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.bool]),
  //floatingLabel: PropTypes.bool,
  label: _react.PropTypes.string.isRequired,
  offset: _react.PropTypes.string,
  onFocus: _react.PropTypes.func,
  onBlur: _react.PropTypes.func,
  onChange: _react.PropTypes.func,
  readOnly: _react.PropTypes.bool,
  showChipsBelow: _react.PropTypes.bool,
  value: _react.PropTypes.array
};
exports.default = MultiSelectField;