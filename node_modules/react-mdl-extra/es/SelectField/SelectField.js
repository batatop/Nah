'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMdl = require('react-mdl');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Dropdown = require('../Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _OptionList = require('../OptionList');

var _OptionList2 = _interopRequireDefault(_OptionList);

require('./SelectField.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectField = function (_Component) {
  _inherits(SelectField, _Component);

  function SelectField(props) {
    _classCallCheck(this, SelectField);

    var _this = _possibleConstructorReturn(this, (SelectField.__proto__ || Object.getPrototypeOf(SelectField)).call(this, props));

    _this.state = { focused: false };
    _this.onItemClick = _this.onItemClick.bind(_this);
    _this.onTextfieldFocus = _this.onTextfieldFocus.bind(_this);
    _this.onTextfieldBlur = _this.onTextfieldBlur.bind(_this);
    return _this;
  }

  _createClass(SelectField, [{
    key: 'onItemClick',
    value: function onItemClick(newValue) {
      var _props = this.props,
          value = _props.value,
          onChange = _props.onChange;

      if (value !== newValue) {
        if (onChange) onChange(newValue);
      }
    }
  }, {
    key: 'onTextfieldFocus',
    value: function onTextfieldFocus() {
      var _props2 = this.props,
          value = _props2.value,
          onFocus = _props2.onFocus;

      this.setState({ focused: true });
      if (onFocus) onFocus(value);
    }
  }, {
    key: 'onTextfieldBlur',
    value: function onTextfieldBlur() {
      var _props3 = this.props,
          value = _props3.value,
          onBlur = _props3.onBlur;

      this.setState({ focused: false });
      if (onBlur) onBlur(value);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props4 = this.props,
          align = _props4.align,
          className = _props4.className,
          disabled = _props4.disabled,
          error = _props4.error,
          floatingLabel = _props4.floatingLabel,
          label = _props4.label,
          offset = _props4.offset,
          readOnly = _props4.readOnly,
          value = _props4.value;
      var focused = this.state.focused;


      var children = _react.Children.toArray(this.props.children);
      var empty = !children.length;

      var isValue = value !== undefined && value !== null && value !== '';
      var index = isValue && children.findIndex(function (c) {
        return c.props.value === value;
      });
      var inputValue = isValue && index > -1 ? children[index].props.children : '';

      var inputProps = {
        disabled: disabled,
        error: error,
        floatingLabel: floatingLabel,
        label: label,
        readOnly: true,
        ref: function ref(_ref) {
          return _this2.input = _ref;
        },
        type: 'text',
        value: inputValue
      };
      if (!readOnly) {
        inputProps.onFocus = this.onTextfieldFocus;
        inputProps.onBlur = this.onTextfieldBlur;
      }

      var mainClass = (0, _classnames2.default)({
        'mdl-selectfield': true,
        'mdl-selectfield--disabled': disabled,
        'mdl-selectfield--empty': empty,
        'mdl-selectfield--error': error,
        'mdl-selectfield--focused': focused
      }, className);

      if (disabled || readOnly || empty) {
        return _react2.default.createElement(
          'div',
          { className: mainClass },
          _react2.default.createElement(_reactMdl.Textfield, inputProps),
          _react2.default.createElement('i', { className: 'mdl-selectfield__arrow' })
        );
      }

      var dropdownProps = {
        align: align,
        offset: offset,
        target: _react2.default.createElement(_reactMdl.Textfield, inputProps),
        useTargetWidth: true
      };

      return _react2.default.createElement(
        'div',
        { className: mainClass },
        _react2.default.createElement(
          _Dropdown2.default,
          dropdownProps,
          _react2.default.createElement(
            _OptionList2.default,
            { value: value, onItemClick: this.onItemClick },
            children
          )
        ),
        _react2.default.createElement('i', { className: 'mdl-selectfield__arrow' })
      );
    }
  }]);

  return SelectField;
}(_react.Component);

SelectField.propTypes = {
  align: _react.PropTypes.string,
  children: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.element), _react.PropTypes.element]),
  className: _react.PropTypes.string,
  disabled: _react.PropTypes.bool,
  error: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.bool]),
  floatingLabel: _react.PropTypes.bool,
  label: _react.PropTypes.string.isRequired,
  offset: _react.PropTypes.string,
  onFocus: _react.PropTypes.func,
  onBlur: _react.PropTypes.func,
  onChange: _react.PropTypes.func,
  readOnly: _react.PropTypes.bool,
  showMenuBelow: _react.PropTypes.bool,
  value: _react.PropTypes.any
};
SelectField.defaultProps = {
  offset: '-20px 0'
};
exports.default = SelectField;