'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _keycodes = require('../keycodes');

var _keycodes2 = _interopRequireDefault(_keycodes);

require('./MenuList.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MenuList = function (_Component) {
  _inherits(MenuList, _Component);

  function MenuList(props) {
    _classCallCheck(this, MenuList);

    var _this = _possibleConstructorReturn(this, (MenuList.__proto__ || Object.getPrototypeOf(MenuList)).call(this, props));

    _this.keyDown = _this.keyDown.bind(_this);
    return _this;
  }

  _createClass(MenuList, [{
    key: 'keyDown',
    value: function keyDown(e) {
      if (e.keyCode === _keycodes2.default.ESC) {
        // prevent esc bubbling
        e.preventDefault();
        e.stopPropagation();
        this.props.closePortal();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          closePortal = _props.closePortal,
          className = _props.className;

      var listClass = (0, _classnames2.default)('mdl-portalmenu__list', className);
      var children = _react.Children.toArray(this.props.children).filter(function (c) {
        return c;
      });
      return _react2.default.createElement(
        'ul',
        { className: listClass, ref: function ref(_ref) {
            return _this2.list = _ref;
          } },
        _react.Children.map(children, function (child, index) {
          return (0, _react.cloneElement)(child, {
            tabIndex: index + 1,
            closeMenu: closePortal
          });
        })
      );
    }
  }]);

  return MenuList;
}(_react.Component);

MenuList.propTypes = {
  children: _react.PropTypes.any.isRequired,
  className: _react.PropTypes.string,
  closePortal: _react.PropTypes.func
};
exports.default = MenuList;