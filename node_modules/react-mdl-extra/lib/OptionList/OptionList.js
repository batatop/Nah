'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _keycodes = require('../keycodes');

var _keycodes2 = _interopRequireDefault(_keycodes);

require('./OptionList.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OptionList = function (_Component) {
  _inherits(OptionList, _Component);

  function OptionList(props) {
    _classCallCheck(this, OptionList);

    var _this = _possibleConstructorReturn(this, (OptionList.__proto__ || Object.getPrototypeOf(OptionList)).call(this, props));

    _this.keyDown = _this.keyDown.bind(_this);
    return _this;
  }

  _createClass(OptionList, [{
    key: 'keyDown',
    value: function keyDown(e) {
      if (e.keyCode === _keycodes2.default.ESC) {
        // prevent esc bubbling
        e.preventDefault();
        e.stopPropagation();
        this.props.closePortal();
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      // add keydown event listener
      document.addEventListener('keydown', this.keyDown, true);
      // scroll into view
      if (!this.props.value) return; // no value
      this.scrollTimeout = setTimeout(function () {
        _this2.scrollTimeout = null;
        if (_this2.list.scrollHeight > _this2.list.offsetHeight) {
          var _list$getElementsByCl = _this2.list.getElementsByClassName('mdl-option--selected'),
              _list$getElementsByCl2 = _slicedToArray(_list$getElementsByCl, 1),
              selected = _list$getElementsByCl2[0];

          _this2.list.scrollTop = selected.offsetTop - _this2.list.clientHeight / 2;
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      // remove event listener
      document.removeEventListener('keydown', this.keyDown, true);
      // clear scroll timeout if necessary
      if (this.scrollTimeout) {
        clearTimeout(this.scrollTimeout);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          children = _props.children,
          closePortal = _props.closePortal,
          className = _props.className,
          onItemClick = _props.onItemClick,
          value = _props.value;

      var listClass = (0, _classnames2.default)('mdl-option__list', className);
      return _react2.default.createElement(
        'ul',
        { className: listClass, ref: function ref(_ref) {
            return _this3.list = _ref;
          } },
        _react.Children.map(children, function (child, index) {
          return (0, _react.cloneElement)(child, {
            closeMenu: closePortal,
            onClick: onItemClick,
            selected: child.props.value === value,
            tabIndex: index + 1
          });
        })
      );
    }
  }]);

  return OptionList;
}(_react.Component);

OptionList.propTypes = {
  children: _react.PropTypes.any.isRequired,
  className: _react.PropTypes.string,
  closePortal: _react.PropTypes.func,
  onItemClick: _react.PropTypes.func.isRequired,
  value: _react.PropTypes.any
};
exports.default = OptionList;